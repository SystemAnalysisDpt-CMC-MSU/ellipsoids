classdef FigureBuilder
    properties (GetAccess=private,Constant)
        FIGURE_PLOTTS_PROP_EXCLUDE_LIST={'hFigure'};
        FIGURE_PLOTTS_PROP_MAPPING={};
        GRAPH_GROUP_PLOTTS_PROP_EXCLUDE_LIST={'hAxes'};
        GRAPH_GROUP_PLOTTS_PROP_MAPPING={...
            'legendLocation','graphLegendsLocation',[];...
            'groupTitle','groupTitles',[];...
            'groupXLabel','groupXLabels',[];...
            'groupYLabel','groupYLabels',[];...
            'xAxisLocation','groupXAxisLocations',[];...
            'yAxisLocation','groupYAxisLocations',[];...
            'xColor','groupXColors',[];...
            'yColor','groupYColors',[];...
            'zoomDir','graphZoomDirList',[];...
            'xType','xTypes',[];...
            'roundXLabel','roundXLabels',@(varargin)horzcat(varargin{:});...
            'xLabelRotation','groupXLabelRotation',@(varargin)horzcat(varargin{:});...
            'yLabelRotation','groupYLabelRotation',@(varargin)horzcat(varargin{:});...
            'propSetFunc','groupPropSetFuncList',[]};
        GRAPH_PLOTTS_PROP_EXCLUDE_LIST={'hPlot'};
        GRAPH_PLOTTS_PROP_MAPPING={...
            'type','graphTypes',[];...
            'plotSpecs','graphPlotSpecs',[];...
            'lineWidth','lineWidth',@(varargin)horzcat(varargin{:});...
            'barWidthVec','widthCell',[];...
            'markerSize','markerSize',@(varargin)horzcat(varargin{:});...
            'legend','graphLegends',[];...
            'color','graphRgbColors',[];...
            'SSpecProps','graphSpecPropList',[];...
            'propSetFunc','graphPropSetFuncList',[]};
        ELEMENT_MAPPING={...
            'FIGURE',@(figObj){figObj};...
            'GRAPH_GROUP',@(figObj)figObj.getGraphGroupObjList();...
            'GRAPH',@(figObj)figObj.getGraphObjList()};
    end
    
    methods (Static)
        function createFigure(figureObj,varargin)
            if nargin==0,
                modgen.common.throwerror('wrongInput',...
                    'figureObj must be given as input');
            end
            if ~(numel(figureObj)==1&&isa(figureObj,'modgen.graphics.bld.Figure')),
                modgen.common.throwerror('wrongInput',...
                    'figureObj is wrong');
            end
            %
            areaDistrVec=cellfun(@(x)x.areaDistr,figureObj.groupPlaceCVec);
            isnWrong=isnumeric(areaDistrVec)&&isreal(areaDistrVec);
            if isnWrong,
                areaDistrVec=double(areaDistrVec);
                isnWrong=all(areaDistrVec>=0&areaDistrVec<=1);
            end
            if ~isnWrong,
                modgen.common.throwerror('wrongInput',[...
                    'areaDistr is wrong for objects of groupPlaceCVec '...
                    'within figureObj']);
            end
            if all(areaDistrVec==0),
                areaDistrVec=1/numel(areaDistrVec);
            else
                areaDistrVec=areaDistrVec/sum(areaDistrVec);
            end
            %
            elementMapping=eval([mfilename('class') '.ELEMENT_MAPPING']);
            nElements=size(elementMapping,1);
            elementPropCVec=cell(nElements,1);
            plottsInputCVec=cell(nElements,1);
            for iElement=1:nElements,
                prefixStr=[mfilename('class') '.'...
                    upper(elementMapping{iElement,1})];
                propExcludeList=eval([prefixStr...
                    '_PLOTTS_PROP_EXCLUDE_LIST']);
                propMapping=eval([prefixStr '_PLOTTS_PROP_MAPPING']);
                objCVec=feval(elementMapping{iElement,2},figureObj);
                nObjs=numel(objCVec);
                propCVec=cellfun(@(x)x.getPropList(),...
                    objCVec,'UniformOutput',false);
                propNameCVec=cellfun(@(x)x(1:2:end-1),propCVec,...
                    'UniformOutput',false);
                propValCVec=cellfun(@(x)x(2:2:end),propCVec,...
                    'UniformOutput',false);
                nPropsVec=cellfun('prodofsize',propNameCVec);
                [propNameCVec,~,indPropVec]=unique(...
                    horzcat(propNameCVec{:}));
                indPropCVec=mat2cell(reshape(indPropVec,1,[]),1,nPropsVec);
                isPropMat=false(nObjs,numel(propNameCVec));
                for iObj=1:nObjs,
                    isPropMat(iObj,indPropCVec{iObj})=true;
                end
                isPropVec=all(isPropMat,1);
                nProps=sum(isPropVec);
                propValCMat=cell(nObjs,nProps);
                if ~all(isPropVec),
                    indPropVec=cumsum(isPropVec);
                    indPropVec(~isPropVec)=0;
                else
                    indPropVec=1:nProps;
                end
                if nProps,
                    for iObj=1:nObjs,
                        curIndVec=indPropVec(indPropCVec{iObj});
                        isPropVec=curIndVec~=0;
                        propValCMat(iObj,curIndVec(isPropVec))=...
                            propValCVec{iObj}(isPropVec);
                    end
                    if strcmpi(elementMapping{iElement,1},'FIGURE'),
                        aggrFuncCVec=repmat({@deal},1,nProps);
                    else
                        aggrFuncCVec=repmat({@(varargin)varargin},1,nProps);
                    end
                    if ~isempty(propMapping),
                        [isPropVec,indPropVec]=ismember(...
                            propNameCVec,propMapping(:,1));
                        if any(isPropVec),
                            indPropVec=indPropVec(isPropVec);
                            propNameCVec(isPropVec)=propMapping(indPropVec,2);
                            isFuncVec=~cellfun('isempty',...
                                propMapping(indPropVec,3));
                            if any(isFuncVec),
                                isPropVec(isPropVec)=isFuncVec;
                                indPropVec=indPropVec(isFuncVec);
                                aggrFuncCVec(isPropVec)=...
                                    propMapping(indPropVec,3);
                            end
                        end
                    end
                    propValCVec=cellfun(...
                        @(aggrFunc,valCVec)feval(aggrFunc,valCVec{:}),...
                        aggrFuncCVec,num2cell(propValCMat,1),...
                        'UniformOutput',false);
                    isPropVec=ismember(propNameCVec,propExcludeList);
                    elementPropCVec{iElement}=reshape([...
                        propNameCVec(isPropVec);propValCVec(isPropVec)],...
                        1,[]);
                    plottsInputCVec{iElement}=reshape([...
                        propNameCVec(~isPropVec);...
                        propValCVec(~isPropVec)],1,[]);
                end
            end
            plottsInputCVec=horzcat(plottsInputCVec{:});
            groupPlaceCVec=figureObj.groupPlaceCVec;
            placeMembershipCVec=arrayfun(@(x,y)repmat(x,1,y),...
                1:numel(groupPlaceCVec),cellfun(...
                @(x)numel(x.groupCVec),groupPlaceCVec),...
                'UniformOutput',false);
            plottsInputCVec=horzcat(plottsInputCVec,...
                {'placeMembership',horzcat(placeMembershipCVec{:})});
            groupCVec=cellfun(@(x)x.groupCVec,groupPlaceCVec,...
                'UniformOutput',false);
            groupCVec=horzcat(groupCVec{:});
            groupMembershipCVec=arrayfun(@(x,y)repmat(x,1,y),...
                1:numel(groupCVec),cellfun(...
                @(x)numel(x.graphCVec),groupCVec),...
                'UniformOutput',false);
            plottsInputCVec=horzcat(plottsInputCVec,...
                {'groupMembership',horzcat(groupMembershipCVec{:})});
            graphCVec=cellfun(@(x)x.graphCVec,groupCVec,...
                'UniformOutput',false);
            graphCVec=horzcat(graphCVec{:});
            if ~isnan(figureObj.hFigure),
                plottsInputCVec=horzcat(plottsInputCVec,...
                    {'fHandle',figureObj.hFigure});
            end
            %% plotting
            [hAxesVec,hPlotVec]=plotts(...
                'xCell',cellfun(@(x)x.xVec,graphCVec,...
                'UniformOutput',false),...
                'yCell',cellfun(@(x)x.yVec,graphCVec,...
                'UniformOutput',false),...
                'groupAreaDistr',areaDistrVec,...
                plottsInputCVec{:});
            StSubs=substruct('.','hPlot');
            graphCVec=cellfun(@(x,y)subsasgn(x,StSubs,y),...
                graphCVec,num2cell(hPlotVec),'UniformOutput',false); %#ok<NASGU>
            StSubs=substruct('.','hAxes');
            groupCVec=cellfun(@(x,y)subsasgn(x,StSubs,y),...
                groupCVec,num2cell(hAxesVec),'UniformOutput',false); %#ok<NASGU>
            if isnan(figureObj.hFigure),
                hFigureVec=get(hAxesVec,'Parent');
                if iscell(hFigureVec),
                    hFigureVec=horzcat(hFigureVec{:});
                end
                hFigureVec=unique(hFigureVec);
                if numel(hFigureVec)>1,
                    modgen.common.throwerror('wrongObjState',...
                        'Some axes relate to different figures');
                end
                figureObj.hFigure=hFigureVec;
            end
            %% additional actions
            nGroupPlaces=numel(groupPlaceCVec);
            for iGroupPlace=1:nGroupPlaces,
                groupCVec=groupPlaceCVec{iGroupPlace}.groupCVec;
                isRightYAxisLocVec=cellfun(...
                    @(x)strcmp(x.yAxisLocation,'right'),...
                    groupCVec);
                isLeftYAxisLocVec=~isRightYAxisLocVec;
                isEmptyAxesVec=cellfun(@(x)isEmptyAxes(x.hAxes),...
                    groupCVec);
                if any(isEmptyAxesVec)
                    isLeftYAxisLocVec(isEmptyAxesVec)=false;
                    isRightYAxisLocVec(isEmptyAxesVec)=false;
                end
                if sum(isLeftYAxisLocVec)>1||...
                        sum(isRightYAxisLocVec)>2,
                     modgen.common.throwerror('wrongStateObj',[...
                         'There are more than one left or '...
                         'more than two right axes for '...
                         '%d place, this feature is not yet '...
                         'implemented '],iGroupPlace);
                end
                if ~any(isRightYAxisLocVec),
                    continue;
                end
                indRightAxesVec=find(isRightYAxisLocVec);
                if any(isLeftYAxisLocVec),
                   hLeftAxes=groupCVec{find(...
                       isLeftYAxisLocVec,1,'first')}.hAxes;
                   tickLenVec=get(hLeftAxes,'TickLength');
                   tickLenVec(1)=tickLenVec(1)/4;
                   hRightAxes=groupCVec{indRightAxesVec(1)}.hAxes;
                   set(hRightAxes,'TickLength',tickLenVec);
                   cellfun(...
                       @(x)set(x.hAxes,'XGrid','off','YGrid','off'),...
                       groupCVec(isRightYAxisLocVec));
                else
                   cellfun(...
                       @(x)set(x.hAxes,'XGrid','off','YGrid','off'),...
                       groupCVec(indRightAxesVec(2:end)));
                end
                if numel(indRightAxesVec)>1,
                    groupObj=groupCVec{indRightAxesVec(end)};
                    hAxes=groupObj.hAxes;
                    set(hAxes,'Visible','off',...
                        'Units','normalized',...
                        'XGrid','off','YGrid','off',...
                        'YTickMode','manual');
                    tickLenVec=get(hAxes,'TickLength');
                    fontSize=get(hAxes,'FontSize');
                    fontWeight=get(hAxes,'FontWeight');
                    posVec=get(hAxes,'Position');
                    posVec(1)=posVec(1)+posVec(3)+(1-sum(posVec([1 3])))/2;
                    posVec(3)=tickLenVec(1);
                    hAnnotAxes=axes('Position',posVec,...
                        'Color','none','FontSize',fontSize,...
                        'FontWeight',fontWeight,...
                        'YAxisLocation','right',...
                        'HandleVisibility','off',...
                        'XTickLabelMode','manual',...
                        'XTick',[],'XTickLabel',[],...
                        'YTickLabelMode','manual','YTickMode','manual',...
                        'YLim',get(hAxes,'YLim'),...
                        'YTick',get(hAxes,'YTick'),...
                        'YTickLabel',get(hAxes,'YTickLabel'),...
                        'YGrid','on'); %#ok<LAXES>
                    ylabel(hAnnotAxes,groupObj.groupYLabel,...
                        'Interpreter','none',...
                        'FontSize',fontSize,'FontWeight',fontWeight,...
                        'Rotation',groupObj.yLabelRotation);
                    %set(hAxes,'UserData',hAnnotAxes);
                end
            end
            
            function res=isEmptyAxes(hAxes)
                res=strcmp(get(hAxes,'Visible'),'off');
                if ~res,
                    yLabelStr=get(get(hAxes,'YLabel'),'String');
                    if iscell(yLabelStr),
                        yLabelStr=yLabelStr{:};
                    end
                    res=isempty(yLabelStr)&&isempty(get(hAxes,'YTickLabel'));
                end
            end
        end
    end
end