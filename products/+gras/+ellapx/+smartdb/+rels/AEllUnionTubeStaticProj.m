classdef AEllUnionTubeStaticProj < ...
        gras.ellapx.smartdb.rels.AEllTubeProj & ...
        gras.ellapx.smartdb.rels.AEllUnionTube & ...
        gras.ellapx.smartdb.rels.AEllUnionTubeNotTightStaticProj & ...
        gras.ellapx.smartdb.rels.IEllUnionTube & ...
        gras.ellapx.smartdb.rels.IEllTubeProj
    %
    methods (Access=protected)
        function fieldList=getPlotArgumentsFieldList(self)
            import gras.ellapx.smartdb.F
            %
            FIELDS={'X_TOUCH_CURVE_MAT','X_TOUCH_OP_CURVE_MAT',...
                'TIME_TOUCH_END_VEC','TIME_TOUCH_OP_END_VEC',...
                'IS_LT_TOUCH_VEC','IS_LT_TOUCH_OP_VEC'};
            %
            fieldList=getPlotArgumentsFieldList@...
                gras.ellapx.smartdb.rels.AEllUnionTubeNotTightStaticProj(self);
            %
            fieldList=[fieldList,F.getNameList(FIELDS)];
        end
        %
        function checkDataConsistency(self)
            %
            checkDataConsistency@...
                gras.ellapx.smartdb.rels.AEllUnionTubeNotTightStaticProj(self);
            %
            nTubes=self.getNTuples();
            timeVecList=self.timeVec;
            timeTouchEndVecList=self.timeTouchEndVec;
            timeTouchOpEndVecList=self.timeTouchOpEndVec;
            isLtTouchVecList=self.isLtTouchVec;
            isLtTouchOpVecList=self.isLtTouchOpVec;
            %
            for iTube=1:nTubes
                startTime=min(timeVecList{iTube});
                endTime=max(timeVecList{iTube});
                check(timeTouchEndVecList{iTube},...
                    isLtTouchVecList{iTube},'');
                check(timeTouchOpEndVecList{iTube},...
                    isLtTouchOpVecList{iTube},'Op');
            end
            %
            function check(timeTouchEndVec,isLtTouchVec,tag)
                import modgen.common.throwerror;
                isOk=all(timeTouchEndVec<=endTime&...
                    timeTouchEndVec>=startTime|...
                    xor(isnan(timeTouchEndVec),isLtTouchVec));
                if ~isOk
                    throwerror('wrongInput',...
                        ['Values of timeTouch%sEndVec are expected to be within ',...
                        '[startTime,endTime] range and consistent ',...
                        'with isLtTouch%Vec'],tag);
                end
            end
        end
        %
        function hVec=plotCreateReachTubeFunc(self,hAxes,projType,timeVec,...
                lsGoodDirOrigVec,ltGoodDirMat,sTime,ltGoodDirNormVec,...
                approxType,QArray,aMat,MArray,xTouchCurveMat,xTouchOpCurveMat,...
                timeTouchEndVec,timeTouchOpEndVec,isLtTouchVec,isLtTouchOpVec,varargin)
            %
            import gras.ellapx.enums.EApproxType
            %
            hVec = plotCreateReachTubeFunc@...
                gras.ellapx.smartdb.rels.AEllUnionTubeNotTightStaticProj(...
                self,hAxes,projType,timeVec,lsGoodDirOrigVec,...
                ltGoodDirMat,sTime,ltGoodDirNormVec,approxType,QArray,...
                aMat,MArray);
            %
            if approxType==EApproxType.External
                hTouchVec=self.plotCreateTubeTouchCurveFunc(hAxes,projType,...
                    timeVec,lsGoodDirOrigVec,ltGoodDirMat,sTime,...
                    ltGoodDirNormVec,approxType,QArray,aMat,MArray,...
                    xTouchCurveMat,xTouchOpCurveMat,timeTouchEndVec,...
                    timeTouchOpEndVec,isLtTouchVec,isLtTouchOpVec);
                hVec=[hTouchVec,hVec];
            end
        end
        %
        function hVec=plotCreateTubeTouchCurveFunc(self,hAxes,projType,timeVec,...
                lsGoodDirOrigVec,ltGoodDirMat,sTime,ltGoodDirNormVec,...
                ~,~,~,~,xTouchCurveMat,xTouchOpCurveMat,timeTouchEndVec,...
                timeTouchOpEndVec,isLtTouchVec,isLtTouchOpVec)
            %
            xTouchCurveMat(:,~isLtTouchVec)=nan;
            xTouchOpCurveMat(:,~isLtTouchOpVec)=nan;
            %
            hVec=plotCreateTubeTouchCurveFunc@...
                gras.ellapx.smartdb.rels.AEllTubeProj(self,hAxes,projType,...
                timeVec,lsGoodDirOrigVec,ltGoodDirMat,sTime,...
                ltGoodDirNormVec,ltGoodDirNormOrigVec,xTouchCurveMat,...
                xTouchOpCurveMat);
            %
            [cMat,cOpMat]=self.getGoodDirColor(ltGoodDirNormVec,...
                ltGoodDirNormOrigVec,isLtTouchVec,isLtTouchOpVec);
            %
            hCVec{2}=dispTouchArea(xTouchCurveMat,timeTouchEndVec,cMat);
            hCVec{1}=dispTouchArea(xTouchOpCurveMat,timeTouchOpEndVec,cOpMat);
            hVec=[hVec,hCVec{:}];
            %
            function hSurfVec=dispTouchArea(xTouchCurveMat,timeEndVec,cMat)
                import modgen.graphics.plot3adv;
                %
                nameSuffix=self.goodDirProp2Str(...
                    lsGoodDirOrigVec,sTime);
                plotName=['Touch surface: ',nameSuffix];
                hSurfVec=self.plotTouchArea(...
                    [timeVec;xTouchCurveMat].',timeEndVec.',cMat,...
                    'Parent',hAxes,'DisplayName',plotName,...
                    'EdgeLighting','phong','FaceLighting','phong',...
                    'FaceColor','interp','EdgeColor','none',...
                    'FaceAlpha',1);
            end
        end
        %
        function h=plotTouchArea(~,vMat,xBarTopVec,colorMat,varargin)
            isVertVec=(vMat(:,1)~=xBarTopVec)&~isnan(xBarTopVec);
            if any(isVertVec)
                vMat(~isVertVec,:)=nan;
                xBarTopVec(~isVertVec)=nan;
                nBasicVerts=size(vMat,1);
                %
                vAddMat=[xBarTopVec vMat(:,2:3)];
                nAddVerts=nBasicVerts;
                indAddVec=transpose(nBasicVerts+1:nBasicVerts+nAddVerts);
                indBasicVec=transpose(1:nBasicVerts);
                %
                vMat=[vMat;vAddMat];
                fMat=[indBasicVec(1:end-1) indBasicVec(2:end) indAddVec(1:end-1);...
                    indBasicVec(2:end) indAddVec(2:end) indAddVec(1:end-1)];
                colorMat=[colorMat;colorMat(indBasicVec,:)];
                %
                %
                h=patch('FaceVertexCData',colorMat,...
                    'Faces',fMat,'Vertices',vMat,varargin{:});
                material('metal');
            else
                h=[];
            end
        end
    end
end