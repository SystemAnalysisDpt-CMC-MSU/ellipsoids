classdef LReachProblemDynamicsFactory<handle
    methods (Static, Access = private)
        function probDefConstr = getProbDynDiscrBuild(isDisturb,isBack)
            if (~isDisturb && isBack)
                probDefConstr = @(varargin)gras.ellapx.lreachplain. ...
                    probdyn.LReachDiscrBackwardDynamics(gras.ellapx. ...
                    lreachplain.probdef.LReachContProblemDef( ...
                    varargin{:}));
            elseif (~isDisturb && ~isBack)
                probDefConstr = @(varargin)gras.ellapx.lreachplain. ...
                    probdyn.LReachDiscrForwardDynamics (gras.ellapx. ...
                    lreachplain.probdef.LReachContProblemDef( ...
                    varargin{:}));
            elseif (isDisturb && isBack)
                probDefConstr = @(varargin)gras.ellapx.lreachuncert. ...
                    probdyn.LReachDiscrBackwardDynamics(gras.ellapx. ...
                    lreachuncert.probdef.LReachContProblemDef( ...
                    varargin{:}));
            elseif (isDisturb && ~isBack)
                probDefConstr = @(varargin)gras.ellapx.lreachuncert. ...
                    probdyn.LReachDiscrForwardDynamics (gras.ellapx. ...
                    lreachuncert.probdef.LReachContProblemDef( ...
                    varargin{:}));
            end
        end
    end
    %
    methods(Static)
        function pDynamicsObject=create(pDefObj,relTol,absTol)
            import gras.ellapx.lreachuncert.probdyn.LReachProblemDynamicsInterp;
            import gras.ellapx.lreachuncert.probdyn.LReachProblemLTIDynamics;
            %
            if isa(pDefObj,...
                    'gras.ellapx.lreachuncert.probdef.ReachContLTIProblemDef')
                pDynamicsObject = LReachProblemLTIDynamics(pDefObj,...
                    relTol,absTol);
            elseif isa(pDefObj,...
                    'gras.ellapx.lreachuncert.probdef.LReachContProblemDef')
                pDynamicsObject = LReachProblemDynamicsInterp(pDefObj,...
                    relTol,absTol);
            else
                modgen.common.throwerror(...
                    'wrongInput', 'Incorrect system definition');
            end
        end
        %
        function pDynamicsObject=createByParams(aCMat,bCMat,pCMat,pCVec,cCMat,...
                qCMat,qCVec,x0Mat,x0Vec,timeLimVec,relTol,absTol,isDiscrete)
            import gras.ellapx.lreachuncert.probdyn.LReachProblemDynamicsFactory;            
            if nargin<13
                isDiscrete = false;
            end
            isBack = timeLimVec(1)>timeLimVec(2);
            isDisturb=LReachProblemDynamicsFactory.getIsDisturbance(...
                cCMat,qCMat);
            %
            if ~isDiscrete
                timeLimVec = sort(timeLimVec);
                isOk=true;
                if isDisturb
                    if gras.ellapx.lreachuncert.probdef.ReachContLTIProblemDef.isCompatible(...
                            aCMat,bCMat,pCMat,pCVec,...
                            cCMat,qCMat,qCVec,x0Mat,x0Vec,timeLimVec)
                        pDefObj = gras.ellapx.lreachuncert.probdef.ReachContLTIProblemDef(...
                            aCMat,bCMat,pCMat,pCVec,...
                            cCMat,qCMat,qCVec,x0Mat,x0Vec,timeLimVec);
                        pDynamicsObject = ...
                            gras.ellapx.lreachuncert.probdyn.LReachProblemLTIDynamics(...
                            pDefObj,relTol,absTol);
                    elseif gras.ellapx.lreachuncert.probdef.LReachContProblemDef.isCompatible(...
                            aCMat,bCMat,pCMat,pCVec,...
                            cCMat,qCMat,qCVec,x0Mat,x0Vec,timeLimVec)
                        pDefObj = gras.ellapx.lreachuncert.probdef.LReachContProblemDef(...
                            aCMat,bCMat,pCMat,pCVec,...
                            cCMat,qCMat,qCVec,x0Mat,x0Vec,timeLimVec);
                        pDynamicsObject = ...
                            gras.ellapx.lreachuncert.probdyn.LReachProblemDynamicsInterp(...
                            pDefObj,relTol,absTol);
                    else
                        isOk=false;
                    end
                else
                    if gras.ellapx.lreachplain.probdef.ReachContLTIProblemDef.isCompatible(...
                            aCMat,bCMat,pCMat,pCVec,x0Mat,x0Vec,timeLimVec)
                        pDefObj = gras.ellapx.lreachplain.probdef.ReachContLTIProblemDef(...
                            aCMat,bCMat,pCMat,pCVec,x0Mat,x0Vec,timeLimVec);
                        pDynamicsObject = ...
                            gras.ellapx.lreachplain.probdyn.LReachProblemLTIDynamics(...
                            pDefObj,relTol,absTol);
                    elseif gras.ellapx.lreachplain.probdef.LReachContProblemDef.isCompatible(...
                            aCMat,bCMat,pCMat,pCVec,x0Mat,x0Vec,timeLimVec)
                        pDefObj = gras.ellapx.lreachplain.probdef.LReachContProblemDef(...
                            aCMat,bCMat,pCMat,pCVec,x0Mat,x0Vec,timeLimVec);
                        pDynamicsObject = ...
                            gras.ellapx.lreachplain.probdyn.LReachProblemDynamicsInterp(...
                            pDefObj,relTol,absTol);
                    else
                        isOk=false;
                    end
                end
                if ~isOk
                    modgen.common.throwerror(...
                        'wrongInput', 'Incorrect system definition');
                end
            else
                handleObj = LReachProblemDynamicsFactory. ...
                    getProbDynDiscrBuild(isDisturb,isBack);
                if isDisturb
                    pDynamicsObject = handleObj(aCMat,bCMat,pCMat,pCVec,cCMat,...
                        qCMat,qCVec,x0Mat,x0Vec,timeLimVec);
                else
                    pDynamicsObject = handleObj(aCMat,bCMat,pCMat,pCVec,x0Mat,...
                        x0Vec,timeLimVec);
                end
            end
        end
        %
        function isDisturb = getIsDisturbance(ctStrCMat, qtStrCMat)
            import gras.mat.fcnlib.isdependent;
            import gras.gen.MatVector;
            isDisturb = true;
            if isdependent(ctStrCMat)
                gtMat = MatVector.fromFormulaMat(ctStrCMat, 0);
                if all(gtMat(:) == 0)
                    isDisturb = false;
                end
            end
            if isDisturb && isdependent(qtStrCMat)
                qtMat = MatVector.fromFormulaMat(qtStrCMat, 0);
                if all(qtMat(:) == 0)
                    isDisturb = false;
                end
            end
        end        
    end
end
