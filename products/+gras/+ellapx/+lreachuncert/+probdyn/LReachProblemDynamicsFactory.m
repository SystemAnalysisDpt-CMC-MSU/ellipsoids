classdef LReachProblemDynamicsFactory<handle
    methods(Static)
        function pDynamicsObject=create(pDefObj,calcPrecision)
            import gras.ellapx.lreachuncert.probdyn.LReachProblemDynamicsInterp;
            import gras.ellapx.lreachuncert.probdyn.LReachProblemLTIDynamics;
            %
            if isa(pDefObj,...
                    'gras.ellapx.lreachuncert.probdef.ReachContLTIProblemDef')
                pDynamicsObject = LReachProblemLTIDynamics(pDefObj,...
                    calcPrecision);
            elseif isa(pDefObj,...
                    'gras.ellapx.lreachuncert.probdef.LReachContProblemDef')
                pDynamicsObject = LReachProblemDynamicsInterp(pDefObj,...
                    calcPrecision);
            else
                modgen.common.throwerror(...
                    'wrongInput', 'Incorrect system definition');
            end
        end
        function pDynamicsObject=createByParams(aCMat,bCMat,pCMat,pCVec,...
                cCMat,qCMat,qCVec,x0Mat,x0Vec,tLims,calcPrecision)
            import gras.ellapx.lreachuncert.probdyn.LReachProblemDynamicsFactory;            
            %
            isDisturbance=LReachProblemDynamicsFactory.getIsDisturbance(...
                cCMat,qCMat);
            %
            isOk=true;
            if isDisturbance
                if gras.ellapx.lreachuncert.probdef.ReachContLTIProblemDef.isCompatible(...
                        aCMat,bCMat,pCMat,pCVec,...
                        cCMat,qCMat,qCVec,x0Mat,x0Vec,tLims)
                    pDefObj = gras.ellapx.lreachuncert.probdef.ReachContLTIProblemDef(...
                        aCMat,bCMat,pCMat,pCVec,...
                        cCMat,qCMat,qCVec,x0Mat,x0Vec,tLims);
                    pDynamicsObject = ...
                        gras.ellapx.lreachuncert.probdyn.LReachProblemLTIDynamics(...
                        pDefObj,calcPrecision);
                elseif gras.ellapx.lreachuncert.probdef.LReachContProblemDef.isCompatible(...
                        aCMat,bCMat,pCMat,pCVec,...
                        cCMat,qCMat,qCVec,x0Mat,x0Vec,tLims)
                    pDefObj = gras.ellapx.lreachuncert.probdef.LReachContProblemDef(...
                        aCMat,bCMat,pCMat,pCVec,...
                        cCMat,qCMat,qCVec,x0Mat,x0Vec,tLims);
                    pDynamicsObject = ...
                        gras.ellapx.lreachuncert.probdyn.LReachProblemDynamicsInterp(...
                        pDefObj,calcPrecision);
                else
                    isOk=false;
                end
            else
                if gras.ellapx.lreachplain.probdef.ReachContLTIProblemDef.isCompatible(...
                        aCMat,bCMat,pCMat,pCVec,x0Mat,x0Vec,tLims)
                    pDefObj = gras.ellapx.lreachplain.probdef.ReachContLTIProblemDef(...
                        aCMat,bCMat,pCMat,pCVec,x0Mat,x0Vec,tLims);
                    pDynamicsObject = ...
                        gras.ellapx.lreachplain.probdyn.LReachProblemLTIDynamics(...
                        pDefObj,calcPrecision);
                elseif gras.ellapx.lreachplain.probdef.LReachContProblemDef.isCompatible(...
                        aCMat,bCMat,pCMat,pCVec,x0Mat,x0Vec,tLims)
                    pDefObj = gras.ellapx.lreachplain.probdef.LReachContProblemDef(...
                        aCMat,bCMat,pCMat,pCVec,x0Mat,x0Vec,tLims);
                    pDynamicsObject = ...
                        gras.ellapx.lreachplain.probdyn.LReachProblemDynamicsInterp(...
                        pDefObj,calcPrecision);
                else
                    isOk=false;
                end                
            end
            if ~isOk
                modgen.common.throwerror(...
                    'wrongInput', 'Incorrect system definition');
            end
        end
        function isDisturb = getIsDisturbance(ctStrCMat, qtStrCMat)
            import gras.mat.fcnlib.isdependent;
            import gras.gen.MatVector;
            isDisturb = true;
            if isdependent(ctStrCMat)
                gtMat = MatVector.fromFormulaMat(ctStrCMat, 0);
                if all(gtMat(:) == 0)
                    isDisturb = false;
                end
            end
            if isDisturb && isdependent(qtStrCMat)
                qtMat = MatVector.fromFormulaMat(qtStrCMat, 0);
                if all(qtMat(:) == 0)
                    isDisturb = false;
                end
            end
        end        
    end
end
