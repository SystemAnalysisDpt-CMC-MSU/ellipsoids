classdef EllipsoidMinkPlotTestCase < mlunitext.test_case
    %
    properties (Access=private)
        testDataRootDir
        ellFactoryObj;
    end
    %
    methods
        function set_up_param(self)
            self.ellFactoryObj = elltool.core.test.mlunit.TEllipsoidFactory();
        end
    end
    methods
        function ellObj = ellipsoid(self, varargin)
            ellObj = self.ellFactoryObj.createInstance('ellipsoid', ...
                varargin{:});            
        end
    end
    %
    methods
        function self = EllipsoidMinkPlotTestCase(varargin)
            self = self@mlunitext.test_case(varargin{:});
            [~,className]=modgen.common.getcallernameext(1);
            shortClassName=mfilename('classname');
            self.testDataRootDir=[fileparts(which(className)),filesep,'TestData',...
                filesep,shortClassName];
        end
        function self = tear_down(self,varargin)
            close all;
        end
        function self = testFillAndShade(self)
            testFirEll = self.ellipsoid(2*eye(2));
            testSecEll = self.ellipsoid([1, 0].', eye(2));
            testThirdEll = self.ellipsoid([0, -1].', 1.5*eye(2));
            minksum(testFirEll,testSecEll,'fill',false,'shade',0.7);
            minksum(testFirEll,testSecEll,'fill',true,'shade',0.7);
            minksum(testFirEll,testSecEll,testThirdEll,'fill',false,'shade',1);
            minksum(testFirEll,testSecEll,testThirdEll,'fill',true,'shade',1);
            minkdiff(testFirEll,testSecEll,'fill',false,'shade',0.7);
            minkdiff(testFirEll,testSecEll,'fill',true,'shade',0.7);
            minkmp(testFirEll,testSecEll,testThirdEll,'fill',false,'shade',0);
            minkmp(testFirEll,testSecEll,testThirdEll,'fill',true,'shade',0);
            minkpm(testFirEll,testSecEll,testThirdEll,'fill',false,'shade',0.1);
            minkpm(testFirEll,testSecEll,testThirdEll,'fill',true,'shade',0.1);
            self.runAndCheckError...
                ('minksum([testFirEll,testSecEll,testThirdEll],''shade'',NaN)', ...
                'wrongShade');
            self.runAndCheckError...
                ('minksum([testFirEll,testSecEll,testThirdEll],''shade'',[0 1])', ...
                'wrongParamsNumber');
            self.runAndCheckError...
                ('minkdiff([testFirEll,testSecEll],''shade'',inf)', ...
                'wrongShade');
            self.runAndCheckError...
                ('minkdiff([testFirEll,testSecEll],''shade'',[0 1])', ...
                'wrongParamsNumber');
            self.runAndCheckError...
                ('minkmp([testFirEll,testSecEll,testThirdEll],''shade'',NaN)', ...
                'wrongShade');
            self.runAndCheckError...
                ('minkmp([testFirEll,testSecEll,testThirdEll],''shade'',[0 1])', ...
                'wrongParamsNumber');
            self.runAndCheckError...
                ('minkpm([testFirEll,testSecEll,testThirdEll],''shade'',-inf)', ...
                'wrongShade');
            self.runAndCheckError...
                ('minkpm([testFirEll,testSecEll,testThirdEll],''shade'',[0 1])', ...
                'wrongParamsNumber');
            
%             self.runAndCheckError...
%                 ('minksum(testFirEll,''r'',testSecEll,''g'',''shade'',1,''fill'',false,''lineWidth'',0)',...
%                 'wrongLineWidth');
%             self.runAndCheckError...
%                 ('minksum(testFirEll,''color'',[0,0,0,1])',...
%                 'wrongColorVecSize');
%             self.runAndCheckError...
%                 ('minksum(testFirEll,''color'',[0,0,1].'')',...
%                 'wrongColorVecSize');
%             self.runAndCheckError...
%                 ('minksum(testFirEll,''color'',[0,0,-1])','wrongColorVec');
%             
%             self.runAndCheckError...
%                 ('minksum(testFirEll,''lineWidth'',2,''color'',[0,0,1],testSecEll,''color'',[1 0 1])',...
%                 'wrongInput:duplicatePropertiesSpec');
%             self.runAndCheckError...
%                 ('minksum(testFirEll, testSecEll,''g'',''g'')',...
%                 'wrongColorChar');
%             minksum([testFirEll,testSecEll,testThirdEll],'shade',0);
%             minksum([testFirEll,testSecEll,testThirdEll],'lineWidth',2);
%             minksum([testFirEll,testSecEll,testThirdEll],'fill',true);
%             minkdiff([testFirEll,testSecEll],'shade',1);
%             minkdiff([testFirEll,testSecEll],'lineWidth', 2);
%             minkdiff([testFirEll,testSecEll],'fill',true);
%             minkmp([testFirEll,testSecEll,testThirdEll],'shade',1);
%             minkmp([testFirEll,testSecEll,testThirdEll],'lineWidth',2);
%             minkmp([testFirEll,testSecEll,testThirdEll],'fill',true);
%             self.runAndCheckError...
%                 ('minksum([testFirEll,testSecEll,testThirdEll;testFirEll,testSecEll,testThirdEll],''fill'',[false false true false])', ...
%                 'wrongParamsNumber');
%             self.runAndCheckError...
%                 ('minksum([testFirEll,testSecEll,testThirdEll;testFirEll,testSecEll,testThirdEll],''fill'',[false false true false].'')', ...
%                 'wrongParamsNumber');
%             minksum([testFirEll,testSecEll,testThirdEll;testFirEll,testSecEll...
%                 ,testThirdEll],'fill',true);
%             minksum([testFirEll,testSecEll,testThirdEll;testFirEll,testSecEll...
%                 ,testThirdEll],'color',[1 0 0]) ;
%             self.runAndCheckError...
%                 ('minksum(testFirEll,''color'',[0 1 0],''r'')', ...
%                 'ConflictingColor');
%             self.runAndCheckError...
%                 ('minkmp([testFirEll,testSecEll,testThirdEll],''lineWidth'',0)', ...
%                 'wrongLineWidth');
%             
%             self.runAndCheckError...
%                 ('minkmp([testFirEll,testSecEll,testThirdEll],''color'',[nan, nan, nan])', ...
%                 'wrongColorVec');
%             self.runAndCheckError...
%                 ('minkmp([testFirEll,testSecEll,testThirdEll],''lineWidth'',[-inf])', ...
%                 'wrongLineWidth');
%             self.runAndCheckError...
%                 ('minksum([testFirEll,testSecEll,testThirdEll],''lineWidth'')', ...
%                 'wrongPropertyValue');
%    
%             self.runAndCheckError...
%                 ('minkmp([testFirEll,testSecEll,testThirdEll],''color'')', ...
%                 'wrongInput');
%             self.runAndCheckError...
%                 ('minksum([testFirEll,testSecEll,testThirdEll],''shade'')', ...
%                 'wrongPropertyValue');
%             self.runAndCheckError...
%                 ('minkdiff([testFirEll,testSecEll],''fill'')', ...
%                 'wrongPropertyValue');
%             self.runAndCheckError...
%                 ('minksum([testFirEll,testSecEll,testThirdEll], 1)', ...
%                 'wrongPropertyType');
%             testFirEll = self.ellipsoid(eye(3));
%             self.runAndCheckError...
%                 ('minksum([testFirEll,testSecEll,testThirdEll])', 'dimMismatch');
%             testFirEll = self.ellipsoid(1);
%             minksum(testFirEll,'fill',true);
%             minksum(testFirEll,'fill',false);
        end
    end
end