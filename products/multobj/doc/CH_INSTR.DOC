         ИНСТРУКЦИЯ ПО ИСПОЛЬЗОВАНИЮ ПАКЕТА ПРОГРАММ
              ПОСТРОЕНИЯ ВЫПУКЛОЙ ОБОЛОЧКИ ТОЧЕК
                 И АППРОКСИМАЦИИ ВЫПУКЛЫХ ТЕЛ

    Описываемый пакет программ выполнен на языке C и  предназ-
начен для решения широкого круга задач, в которых целесообраз-
но использовать процедуру построения выпуклой оболочки  после-
довательно  поступающих точек в виде множества решений системы
линейных неравенств. Он частично ориентирован на алгоритмы ап-
проксимации выпуклых тел, в которых поступающие точки находят-
ся в результате вычисления опорной  функции  аппроксимируемого
тела.  Размерность выпуклой оболочки в принципе может быть лю-
бой, но,  как правило, применение такого подхода целесообразно
при размерностях до пяти - семи.
    В данный момент имеются тексты программ, позволяющие легко
сформировать диалоговые исполнительные модули для решения сле-
дующих задач
  - аппроксимация  проекции многогранного множества, заданного
    системой линейных неравенств, в виде MPS-файла (коммерчес-
    кого  стандарта для записи задачи линейного программирова-
    ния);
  - аппроксимация  выпуклой  оболочки конечного (но быть может
    достаточно большого) числа точек;
  - аппроксимация элипсоидов многогранниками.
При этом  имеется возможность кроме непосредственного построе-
ния внешнего  и  внутреннего  аппроксимирующих  многогранников
рассчитывать объем или площадь поверхности внутреннего аппрок-
симирующего многогранника.
    Вариант аппроксимации по MPS-файлу без дополнительных  вы-
числений  объема или площади поверхности является базовым. Для
него всегда имеется в распоряжении  диалоговый  исполнительный
модуль  с достаточно широкими возможностиями по изменению раз-
личных управляющих параметров.  Другие варианты диалоговых ис-
полнительных модулей могут быть сформированы по мере необходи-
мости. Кроме этого на основе инструкции для программиста могут
быть написаны программы, реализующие решение каких-либо других
задач на основе построения выпуклой  оболочки  последовательно
поступающих точек.

    ГЛАВА 1. ИНСТРУКЦИЯ ДЛЯ ПОЛЬЗОВАТЕЛЯ БАЗОВОГО ВАРИАНТА

                1. Подготовка исходных данных

    Для работы базового исполнительного модуля требуется  под-
готовить в  любом  текстовом  редакторе  три текстовых файла с
исходными данными.
    ПЕРВЫЙ ФАЙЛ  - это MPS-файл описания исходного проектируе-
мого многогранника.
    При составлении  этого  файла  следует соблюдать следующие
технические требования.
    1) Строка целевой функции должна иметь имя "obj", при этом
переменные  проекции должны иметь единичные коэффициенты целе-
вой функции , а все остальные переменные - нулевые коэффициен-
ты целевой функции.
    2) Вариант правых частей должен иметь имя "rhs".
    3) Все  ограничения  должны  быть  только типа "l" или "e"
(строка коэффициентов целевой функции,конечно, имеет тип "n").
    5) Вариант  границ  переменных должен иметь имя "boun",  и
в этом разделе допускается иметь только тип "fr".
    Кроме технических  требований желательно соблюсти еще одно
требование,  касающееся характерных размеров проекции. А имен-
но,  желательно, чтобы максимальное допустимое значение каждой
из переменных проекции  равнялось  нескольким  единицам  (т.е.
имело  бы  значение  от  1 до 10).  Этого можно добиться путем
масштабирования критериальных переменных на  основе какой-либо
априорной информации о проектируемом многограннике. Это требо-
вание не является обязательным,  но его несоблюдение  может  в
процессе  счета  привести к некоторым неудобствам,  так как по
умолчанию многие значения параметров рассчитаны на то, что это
требование удовлетворяется.

     ВТОРОЙ ФАЙЛ  - это файл описания переменных проекции. Его
структура ориентирована на исследование многокритериальных за-
дач принятия решений,  в которых эти переменные выступют в ка-
честве критериев.  При этом допускается описать широкий  набор
переменных  для  целого  класса задач (перечисление переменных
конкретной задачи дается в третьем файле - см.ниже). Файл име-
ет следующую структуру.
    Первая сторка - стандартный заголовок, имеющий вид
*POTENTIAL#MCD-file#2.1*
    Вторая строка - имя задачи.  Она может содержать любой на-
бор символов, желательно не более 40.
    Третья строка - разделяющая,  ее содержание несущественно,
при обработке она пропускается.

    Далее для описания каждой переменной в файле  ставится  по
две строки. В первой строке через пробелы следуют
 -в квадратных скобках знак [+], [-] или [0] -  задает направ-
  ление улучшения данной переменной и используется в  системах
  многокритериального принятии решений;
 -порядковый номер переменной в описании модели (в данном слу-
  чае - в MPS-файле описания проектируемого многогранника);
 -краткое имя переменной - не более 8 символов без пробелов;
 -название единицы измерения переменной;
 -тип переменной (r - действительная, i - целая) и число зна-
  ков после запятой для печати значений в диалоговых системах;
 -коэффициент,  на который будет автоматически умножаться зна-
  чение переменной при диалоге с графической системой.
Во второй строке описания переменной ставится ее полное  имя -
любой набор символов, желательно не более 40.

     После описания последней переменной  следует  разделяющая
строка, первым символом которй должен быть - (минус),  осталь-
ное содержимое несущественно.
     В последней строке через пробел ставится тип модели и имя
файла,  содержащего модель.  В данном случае в  качестве  типа
следует поставить mps, а в качестве имени файла - имя MPS-фай-
ла описания  исходного  проектируемого  многогранника  (первый
файл).

    ТРЕТИЙ ФАЙЛ  - это файл задания переменных проекции в дан-
ной задаче. Он имеет следующую структуру.
    Первая сторка - стандартный заголовок, имеющий вид
*POTENTIAL#CHS-file#3.1*
    Вторая строка  -  имя  файла  описания  перменных проекции
(второй файл).
    Третья строка - количество  переменных проекции.
     Далее должны следовать строки с краткими именами перемен-
ных проекции в количестве,  равном количеству этих переменных.
Необходимо  проследить за тем,  чтобы краткое имя переменной в
точности соответствовало этому имени во  втором  файле.
    Имя описанного файла должно быть поставлено в  пункте меню
"чтение из" диалогового исполнительного модуля.

                2. Проведение расчета проекции

    Расчет проекции  не обязательно должен быть проведен в те-
чение одного сеанса работы.

    Для первого запуска расчета проекции нужно сделать следую-
щее.

    1) Сформировать три текстовых файла в соответствии с пунк-
том 1 данной инструкции.
    2) Запустить на счет исполняемый диалоговый модуль.
    3) Поставить в пункте меню "чтение из" - имя третьего фай-
ла из пункта 1 данной инструкции.
    5) Если требуется, изменить параметры с помощью меню наст-
ройки параметров (пункт меню "параметры" - см.  пункт 3 данной
инструкции).
    6) Произвести расчет с помощью пункта меню "построение".
    7) Поставить в пункте меню "запись в" - имя файла, в кото-
рый надо записать результат аппроксимации.
    8) Осуществить запись полученной аппроксимации  с  помощью
пункта меню "писать".
    Порядок работы, конечно, не обязательно должен быть именно
таким. Можно  возвращаться  к  уже  исполненным ранее пунктам,
продолжать расчет проекции далее и т.п.

    Для уточнения аппроксимации проекции полученной и записан-
ной  ранее  нужно  в  только  что описанной последовательности
действий в пункте меню "чтение из" задать имя файла, в котором
записан  результат рассчитанной и записанной ранее аппроксима-
ции.

             3. Назначение управляющих параметров

add_top -  количество  точек,  которое   будет   дополнительно
    присоединено к выпуклой оболочке,  после чего процесс апп-
    роксимации будет прерван и  будет  выдано  сообщение  "ВСЕ
    СДЕЛАНО".  По умолчанию это количество устанавливается та-
    ким,  чтобы общее количество  присоединенных  точек  стало
    кратно 32 (если оно уже кратно 32,  то, будет присоединено
    еще 32 точки).
EPSset -  желаемая точность аппроксимации (в метрике,  похожей
    на метрику Хаусдорфа),  по достижении которой процесс апп-
    роксимации будет прерван и будет выдано сообщение "ПРОЦЕСС
    ОКОНЧЕН". По умолчанию 1.е-3.
PRNT -  подробность печати.  Подробность 0 - информация о ходе
    процесса не выдается,  по окончании выдается текст сообще-
    ния о причине прерывания (см.  пункт 4 данной инструкции).
    Подробность 1 ( по умолчанию) - после присоединения каждой
    вершины выдается строка из 6 чисел
    - достигнутая точность аппроксимации;
    - количество граней в многограннике аппроксимации;
    - количество вершин выпуклой оболочки;
    - количество  точек - кандидатов на дальнейшее присоедине-
      ние, полученных на основе вычисления опорной функции;
    - количество обращений к вычислению опорной функции в  те-
      чение данного сеанса;
    - общее количество вычисленных граней  многогранников  при
      присоединении всех вершин в течение данного сеанса.
    Подробность 2 - в указанной строке из шести чисел  в  про-
    цессе счета фиксируется изменение каждого из значений, при
    этом текущая строка выдается красным цветом.
    Подробность 3 - обширная отладочная печать  (работает  при
    RCHECK = 1).
RCHECK - признак включения (1 - по умолчанию)  или  выключения
    (0)  проверки  погрешности  построения  выпуклой оболочки,
    связанной с ошибками округления при вычислениях.
RFREE -  признак  освобождения  (1) или неосвобождения (0 - по
    умолчанию) памяти после присоединения каждой вершины.  Ре-
    жим (1) требуется лишь тогда,  когда не хватает памяти для
    работы алгоритма вычисления опорной функции.
INCHECK -  включение (1 - по умолчанию) или выключение (0) ре-
    жима  комбинаторного  отбрасывания  несущественных   нера-
    венств.  Режим  (0)  может привести к большим непроизводи-
    тельным затратам памяти, режим (1) может привести к значи-
    тельным дополнительным затратам времени.
RHYPER - использование (1) или неиспользование (0 - по умолча-
    нию) комбинаторного  перехода  в  пространство  на единицу
    большей размерности.  Режим (1) дает  возможность  строить
    нетелесные выпуклые оболочки и обладает высокой нечувстви-
    тельностью к ошибкам округления,  но  требует  значительно
    больше времени и памяти.
EPSdif - используется при определении того, с какой стороны от
    грани находится присоединяемая точка.  Точка,  находящаяся
    на расстоянии менее,  чем EPSdif от гиперплоскости  грани,
    считается принадлежащей грани.  По умолчанию .9е-5.  Важно
    отметить, что эта величина должна быть меньше, чем  EPSest
    и EPScheck.
EPSin - используется при аппроксимации тел.  Если оказывается,
    что точка,  полученная  в  результате  нахождения  опорной
    функции лежит внутри текущей аппроксимации  на  расстоянии
    более, чем  EPSin,  то процесс аппроксимации прерывается и
    выдается сообщение "ВЕРШИНА ВНУТРИ МНОЖЕСТВА".  По умолча-
    нию 1.е-4.
EPSest - используется при аппроксимации тел. Если оказывается,
    что  точка,  полученная  в  результате  нахождения опорной
    функции лежит на расстоянии менее,  чем EPSest от внутрен-
    него аппроксимирующего многогранника, то она не включается
    в число кандидатов на присоединение,  и поэтому не запоми-
    нается. По умолчанию 1.е-5.
EPScheck - используется только в режиме RCHECK = 1.  Если вер-
    шина  выпуклой  оболочки   в   соответствии   с   хранимой
    комбинаторной  структурой  многогранника  должна лежать на
    грани,  а фактически из-за накопившихся ошибок  округления
    отстоит  от  этой  грани на расстояние более EPScheck,  то
    процесс аппроксимации  прерывается  и  выдается  сообщение
    "ТОЧНОСТЬ НЕДОСТАТОЧНА". По умолчанию 1.е-4.
EPSrel -  используется при вычислении скалярного произведения.
    Если при нахождении суммы двух чисел результат не  превос-
    ходит одного из слагаемых, умноженного на EPSrel, то этому
    результату присваивается значение 0. По умолчанию 1.е-5.
INF - используется в качестве бесконечности.По умолчанию 1.е6.

   4. Сообщения об окончании работы и их возможные причины

    До начала непосредственного построения проекции могут воз-
никнуть аварийные ситуации,  связанные с ошибками  в  описании
исходных данных.

    1. "Не нашли строку n в столбце m", где n и m - целые чис-
ла. Это указывает на несоблюдение технических требований к MPS
-файлу, описанных в пункте 1 данной инструкции или на неверное
указание числа переменных проекции в файле  начальных  данных.
Следует  привести файлы в соответствие с требованиями инструк-
ции, а также удостовериться, что в файле начальных данных чис-
ло переменных проекции указано верно.  Значение n в тексте со-
общения - это номер строки целевой функции.  Значение m -  это
порядковый  номер переменной в MPS-файле,  которая в соответс-
твии с файлом исходных данных является переменной проекции, но
имеет нулевой коэффициент целевой функции в MPS-файле.
    2. Сообщения системы линейного программирования об отсутс-
твии допустимого решения, неограниченности решения и т.п. Сле-
дует выяснить причины этих явлений с помощью средств,  не вхо-
дящих в компетенцию данной системы.
    3. "Неверные данные".  При  попытке  вручную  сформировать
файл аппроксимации были допущены ошибки.
    4. "Неверный формат файла" -  ошибка  в  первой  строке  -
стандартном заголовке.

    Процесс аппроксимации   может    завершиться    следующими
сообщениями.

    1. ВСЕ СДЕЛАНО.  Присоединено заданное  количество  вершин
(см.  параметр add_top).  Если точность аппроксимации недоста-
точна,  то следует продолжить вычисления, повторно использовав
пункт меню "построение".
    2. ПРОЦЕСС ОКОНЧЕН. Достигнута заданная точность аппрокси-
мации ОМД (см. параметр EPSset). Заметим, что точность аппрок-
симации  -  величина  абсолютная  и не зависит от характерного
размера ОМД.
    3. ТОЧНОСТЬ НЕДОСТАТОЧНА.  Сработал  контроль  погрешности
построения выпуклой оболочки (см. параметр EPScheck). Как пра-
вило, это бывает вызвано тем,  что характерный размер проекции
велик (на несколько порядков превышает единицу). Поскольку ко-
эффициенты  неравенств  системы хранятся в одинарной точности,
то погрешность вычислений никак не может оказаться меньше, чем
характерный размер проекции,  умноженный на 1.е-7.  Желательно
при помощи масштабирования переменных привести этот  характер-
ный размер к величине от 1 до 10.  Именно для такого характер-
ного размера установлено значение EPScheck по  умолчанию. Если
же действительно точность построения выпуклой оболочки  оказа-
лась недостаточной из-за  больших  вычислительных  ошибок,  то
можно либо остановиться на полученном результате, либо продол-
жить счет, установив более слабые требования на точность пост-
роения  выпуклой оболочки (увеличив параметр EPScheck).  Заме-
тим,  что нет никакого смысла устанавливать величину  EPScheck
большей,  чем точность аппроксимации EPSset,  так как величина
точности аппроксимации может быть вычислена с точностью не вы-
ше EPScheck.
    4. ВЕРШИНА   ВНУТРИ   МНОЖЕСТВА.   Точка,   полученная   в
результате нахождения опорной функции лежит внутри внутреннего
аппроксимирующего   многогранника  на  расстоянии  более,  чем
EPSin.  Обычно это бывает связано с погрешностями вычислений в
процедуре  вычисления  опорной  функции.  Для блокировки этого
прерывания величину EPSin следует установить большей,  чем ха-
рактерный размер проекции.
    5. МАЛО ПАМЯТИ.  Исчерпана оперативная память ЭВМ. Резуль-
тат  аппроксимации  может  быть сохранен в файле.  Продолжение
счета на данной ЭВМ невозможно.
    6. МНОЖЕСТВО НЕТЕЛЕСНО. Формально это означает, что на на-
чальном этапе работы найдено направление,  вдоль которого тол-
щина проекции меньше величины требуемой точности аппроксимации
EPSset. Это может быть вызвано несколькими причинами.
    а) ОМД действительно является нетелесным, т.е. между пере-
менными прекции имеется линейная связь.  В этом случае следует
изменить постановку задачи,  выразив одну из переменных проек-
ции через остальные и перейдя в подпространство  меньшей  раз-
мерности.
    б) Несоблюдены технические требования к исходным данным. А
именно,  одна  из переменных в MPS-файле,  которая не является
переменной проекции, имеет ненулевой коэффициент целевой функ-
ции. Следует привести файлы в соответствие с требованиями инс-
трукции,  а также удостовериться, что в файле начальных данных
число переменных проекции указано верно.
    7. ПРЕРЫВАНИЕ. Как правило, такое сообщение появляется при
исчерпании  памяти при работе системы линейного программирова-
ния.  Такое сообщение также появляется при насильственном пре-
рывании  счета  путем нажатия клавиши "Esc" в ходе вычислений.
Результат аппроксимации может быть сохранен в файле.  В случае
прерывания счета клавишей "Esc" счет может быть продолжен.
    8. НЕТ РЕЗУЛЬТАТА.  Процесс аппроксимации закончился таким
образом,  что результат аппроксимации не может быть сохранен в
файле.

            5. Построение парето-оболочки проекции

    Во многих случаях построение проекции используется в зада-
чах  принятия  решений,  и  переменные проекции (быть может не
все) являются критериями, которые требуется минимизировать или
максимизировать. В  этих  случаях  основное значение имеют так
называемые точки,  оптимальные по Парето. Множество этих точек
является частью  границы  аппроксимируемой проекции.  При этом
части границы проекции,  которые смотрят в  сторону  ухудшения
значения критериев обычно не имеют значения для исследователя.
     В системе имеется возможность аппроксимировать так  назы-
ваемую Парето-оболочку проекции, т.е. сумму проекции и конуса,
состоящего из векторов,  направленных в сторону ухудшения зна-
чения критериальных переменных.  Для этого надо задать направ-
ления улучшения всех переменных проекции. Это делается в файле
задания  переменных проекции (третий файл пункта 1 данной инс-
трукции).  После краткого имени переменной через пробел  может
быть поставлен знак + или -.  Знак "+" является признаком мак-
симизации переменной,  знак "-" - признаком минимизации. Нали-
чие  таких  знаков указывает,  что для данной переменной будет
троиться Парето-оболочка в указанном  направлении.  Построение
Парето-оболочки позволяет достигать более высокой точности ап-
проксимации, так как в этом случае не происходит аппроксимации
той  части границы проекции,  которая не представляет интереса
для исследователя.
    Следует учесть,  что парето-оболочка является неограничен-
ным множеством,  поэтому  для  ее  представления исследователю
требуется система,  которая  может  изображать  неограниченные
множества.

             ГЛАВА 2. ИНСТРУКЦИЯ ДЛЯ ПРОГРАММИСТА

                  1. Описание внешних переменных

    Все внешние переменные модуля построения выпуклой оболочки
и все функции имеют префикс ch_ . Имеется два файла заголовков
ch_main.h ,  в котором содержатся определения структур и заго-
ловки функций, и  ch_var.def ,  в котором описаны все перемен-
ные.  В головном модуле создаваемой системы для  инициализации
всех внешних переменных следует поместить две строки

#define CONVEX
#include "ch_var.def"

    Описание назначения управляющих параметров дано в предыду-
щей главе.  К этому описанию следует добавить следующее.  Опи-
санный  там  диалоговый исполнительный модуль создан на основе
процедур построения выпуклой оболочки, системы линейного прог-
раммирования и системы организации работы с меню. Ко всем опи-
санным там именам внешних управляющих параметров требуется до-
бавлять префикс ch_ .  Кроме этого переменная add_top является
управляющим параметром только в диалоговом модуле.  В  системе
построения выпуклой оболочки для аналогичных целей использует-
ся переменная
int ch_max_topCOUNT.  Когда общее количество  вершин  выпуклой
    оболочки достигает этой  величины,  процесс  аппроксимации
    прерывается. ЗНАЧЕНИЕ ДОЛЖНО  БЫТЬ  ПРИСВОЕНО  УПРАВЛЯЮЩЕЙ
    ПРОГРАММОЙ.
int ch_max_facetCOUNT.  Когда общее количество граней выпуклой
    оболочки достигает этой  величины,  процесс  аппроксимации
    прерывается. Если значение равно 0, то эта проверка отклю-
    чается. В начале работы значение равно 0.
int ch_LNG - язык выдачи сообщений.  В настоящее время имеется
    возможность использовать один из двух языков  - русский (0
    - по умолчанию) или английский (1).

int ch_N - количество переменных проекции. Считывается из фай-
    ла начальных данных или файла  аппроксимации  в  процедуре
    ch_read_dat;
int *ch_state  -  указатель  на  массив длины ch_N направлений
    улучшений переменных при построении  парето-оболочки  1  -
    максимизировать, -1 - минимизировать, 0 - оба направления.
    Память выделяется в процедуре ch_read_dat,  если  хотя  бы
    одна  переменная  имеет ненулевой признак.  Используется в
    процедуре ch_init_facet (см.также информацию к этим проце-
    дурам).
int ch_N1 = ch_N + 1.  Присваивается в процедуре  ch_read_dat.
    Очень часто используется, поэтому заведена специальная пе-
    ременная.
int ch_Ncomb  -  комбинаторная  размерность выпуклой оболочки.
    Она равна ch_N при ch_RHYPER = 0 и ch_N1 при  ch_RHYPER  =
    = 1.  Значение  присваивается в процедуре ch_init_facet по
    значению управляющего параметра ch_RHYPER.
double *ch_coef - указатель на массив длины ch_N + 2.  Исполь-
    зуется в процедуре ch_combination при вычислении коэффици-
    ентов вновь образующегося неравенства. Память выделяется в
    процедуре ch_read_dat.
float ch_EPS - информационная переменная,  записываемая в файл
    аппроксимации - погрешность построения выпуклой  оболочки,
    связанная с ошибками округления, т.е. максимальное рассто-
    яние от вершины выпуклой оболочки до грани, на которой она
    должна  лежать в соответствии с хранимой в индексах комби-
    наторной  структурой.  В  качестве   начального   значения
    присваивается  ch_EPSdif в процедуре ch_read_dat.  Изменя-
    ется в процедуре ch_check.
float ch_width  -  информационная  переменная,  записываемая в
    файл аппроксимации -  минимальная  зафиксированная  ширина
    проекции  среди тех направлений,  для которых на начальном
    этапе расчета вычислялась опорная функция в двух  противо-
    положных направлениях, может служить ориентировочной оцен-
    кой  толщины  проекции.  В  качестве  начального  значения
    присваивается ch_INF в процедуре ch_read_dat. Изменяется в
    процедуре ch_primal.
Для вычисления шести величин, выдаваемых в строке информацион-
    ной печати используются следующие шесть переменных:
  float ch_max_all_est - точность аппроксимации;
  int ch_facetCOUNT - счетчик неравенств;
  int ch_topCOUNT - счетчик вершин;
  int ch_estCOUNT - счетчик точек - кандидатов на включение;
  int ch_estTOTAL - общий счетчик вычислений опорной функции;
  int ch_facetTOTAL - общий счетчик рассчитанных неравенств.
    Начальные значания всех счетчиков присваиваются в процеду-
    ре ch_read_dat.
Все неравенства хранятся в виде списка структур типа ch_facet.
typedef struct ch_facet
 {double           dif;   /* невязка */
  float           *c;     /* оценка,пр.часть,коэфф-ты */
  unsigned long   *ind;   /* индексы */
  float           *top;   /* оценочная вершина */
  struct ch_facet *next;  /* ссылка на следующую */
 } ch_facet;
  dif - используется для хранения невязок неравенств на присо-
    единяемой точке;
  c -  указатель  на  массив  коэффициентов  неравенств  длины
    ch_N + 2, причем первой стоит оценка неравенства (расстоя-
    ние от грани до  параллельной  ей  опорной  гиперплоскости
    аппроксимируемой проекции),  затем - правая часть неравен-
    ства со  знаком  "-" и, наконец, все коэффициенты, начиная
    с первого;
  ind - указатель на массив индексов неравенства,  причем пер-
    вой вершине  соответствует  старший  бит  первого элемента
    массива, количество элементов массива увеличивается по ме-
    ре роста числа вершин выпуклой  оболочки,  для  каждых  32
    вершин отводится один элемент;
  top - указатель на массив длины ch_N, в котором хранятся ко-
    ординаты вершины,  полученной при вычислении опорной функ-
    ции аппроксимируемой проекции в направлении нормали данной
    грани, имеется не у всех граней;
  next - указатель на следующий элемент списка.
Все вершины выпуклой оболочки хранятся в списке  структур типа
    ch_top.
typedef struct ch_top
 {float           *c;     /* коэффициенты */
  struct ch_top   *next;  /* ссылка на следующую */
 } ch_top;
  c - указатель на массив длины ch_N, в котором хранятся коор-
    динаты вершины;
  next - указатель на следующий элемент списка.
Для указания на то,  какой бит индекса соответствует присоеди-
    няемой точке,  используется переменная  ch_index_position,
    имеющая тип структуры ch_position
typedef struct
 {unsigned long    bit;   /* позиция в ячейке */
  int              number;/* порядковый номер ячейки */
 } ch_position;
  number - номер элемента массива индексов;
  bit - слово в котором равен единице единственный бит,  соот-
    ветствующий  позиции присоединяемой точки.
    Начальные значания присваиваются в процедуре  ch_read_dat,
    преобразуется в процедуре ch_next_position.
При работе  в диалоговом режиме в результате аварийного завер-
    шения присоединения очередной вершины может возникнуть си-
    туация, когда  переменная ch_index_position уже показывает
    место следующей вершины, а система неравенств соответству-
    ет выпуклой оболочке, не включающей эту вершину. Чтобы из-
    бежать повторного изменения  переменной  ch_index_position
    при продолжении процесса аппроксимации, вводитя переменная
  int ch_ex_next,   которой  после  преобразования  переменной
    ch_index_position присваивается значение 1, а после успеш-
    ного завершения присоединения вершины  - значение  0.  На-
    чальное значение 0 присваивается в процедуре ch_read_dat.
Для облегчения  расчетов  при выделении памяти под указатели в
    полях структур,  размеры требуемой памяти в байтах заранее
    подсчитываются и хранятся в переменных:
  unsigned ch_SIZEcfacet - для поля "c" структуры ch_facet;
  unsigned ch_SIZEind - для поля "ind" структуры ch_facet (мо-
    жет увеличиваться в процессе счета);
  unsigned ch_SIZEctop  - для  поля "top" структуры ch_facet и
    поля "c" структуры ch_top;
    Начальные  значения  размеров  присваиваются  в  процедуре
    ch_read_dat.
На начальном  этапе работы среди ограничений могут присутство-
    вать не только равенства, но и неравенства. Если грань со-
    ответствует равенству, то у нее поле ch_top не использует-
    ся.  Чтобы  указать,  что   данная   грань   соответствует
    равенству,  в поле  ch_top  ставится константный указатель
  float *ch_equ.  Чтобы он случайно не совпал с указателем  на
    настоящий массив координат вершины,  в файле ch_var.def он
    инициализируется адресом реально имеющейся фиктивной пере-
    менной
  float ch_dummy.
При работе со списками граней и вершин требуется иметь  указа-
    тели на некоторые элементы списков. Перечислим все внешние
    переменные - указатели на элементы списков.
ch_facet *ch_first_facet  - указатель на первый элемент списка
    граней.
ch_facet *ch_emp_facet - указатель на  первый  элемент  списка
    неиспользуемых для описания многогранника граней,  под ко-
    торые ранее была  выделена  память.  Режим  ch_RFREE  =  0
    состоит  в том,  что для упрощения работы с памятью грани,
    которые исключаются из описания многогранника,  не уничто-
    жаются, а просто переносятся в отдельный список. При необ-
    ходимости создания новых граней сначала используются грани
    из  этого  списка,  а когда этот список исчерпывается,  то
    только тогда начинает выделяться новая память для  граней.
    Для правильной работы программы список неиспользуемых гра-
    ней не должен быть пустым.
ch_facet *ch_equ_facet  - на начальном этапе работы - это ука-
    затель на ведущее равенство в процедуре гауссова  исключе-
    ния. Это равенство преобразуется в два противоположных не-
    равенства, на одно из которых указывает ch_equ_facet, а на
    другое - ch_emp_facet.  Затем оба эти неравенства оценива-
    ются.  Для унификации процедуры оценивания на начальном  и
    на основном этапах процедура оценивания работает так,  что
    она   всегда    использует    список,    начинающийся    с
    ch_first_facet.  Поэтому перед оцениванием упомянутых двух
    неравенств список граней разбиваются на два списка следую-
    щим образом.  В первый список помещаются две грани ch_equ_
    facet   и   ch_emp_facet,   на   его   начало    указывает
    ch_first_facet.  Во второй список помещаются все остальные
    грани описания многогранника, на его начало указывает
  ch_facet *ch_second_facet.  После  проведения оценивания все
    грани   снова   объединяются   в   единый   список.   Если
    ch_equ_facet = NULL, то это свидетельствует о том, что на-
    чальный этап работы завершен.
ch_facet *ch_max_est_facet -  указатель  на грань,  имеющую максимальную
    оценку среди граней, для которых вычислялось точное значе-
    ние опорной функции.  Изменяется в процедурах ch_est_max и
    ch_est_write.
ch_facet *ch_next_est_facet - указатель на грань, которую тре-
    буется оценить в первую очередь.  Именно кэффициенты  этой
    грани попадают в выходной параметр "c" при очередном выхо-
    де  из  процедуры  ch_primal.  Присваивается  в  процедуре
    ch_est_next.
ch_top *ch_first_top - указатель на первый элемент списка вер-
    шин выпуклой оболочки. Присоединяемая вершина включается в
    начало этого списка только после того,  как построение но-
    вого многогранника окончательно завершено.
ch_top *ch_conn_top - указатель на присоединяемую  вершину.  В
    качестве  значения ch_conn_top->c берется ch_max_est_facet
    ->top.  Пока построение нового многогранника  окончательно
    не завершено, на массив координат этой вершины имеется од-
    новременно два указателя:  поле "c" присоединяемой вершины
    и  поле  "top" той грани,  в результате оценивания которой
    эта вершина образовалась.  Память выделяется  в  процедуре
    ch_primal.

                   2. Выбор режимов трансляции

    Тексты процедур  построения  выпуклой  оболочки  выполнены
таким образом, что с помощью определения переменных препроцес-
сора можно получать различные исполнительные модули. Часть та-
ких переменных следует определять в файле ch_main.h.
CH_SIMPLEX -  включение режима,  при  котором  индексы  граней
    хранятся  не  в виде совокупности вершин,  а в виде списка
    симплексов,  на которые разбита каждая грань. Каждый симп-
    лекс  при  этом  хранится в виде обычного индекса в старом
    представлении. Разумеется, при этом измеяется вид поля ind
    структуры ch_facet и вид записи индексов в файле аппрокси-
    мации. Кроме этого файл ch_comb имеет в этом режиме значи-
    тельно  отличающийся вид,  поэтому вместо него следует ис-
    пользовать файл ch_scomb.  Дальнейшие подробности работы в
    этом режиме мы здесь опускаем.
CH_FREEEST - включение режима  свободного  порядка  оценивания
    граней.  Во многих алгоритмах, используемых при оценивании
    граней,  например, в симплекс-методе, время работы сущест-
    венно зависит от положения начального приближения. Поэтому
    основной режим работы состоит в том,  что  для  следующего
    оценивания  выбирается  та  грань,  которая имеет нормаль,
    ближайшую к нормали предыдущей оцененной грани. В тех слу-
    чаях,  когда  такой зависимости не имеется (например, если
    опорная функция задана аналитически),  во избежание лишней
    траты  времени  на вычисление ближайшей грани следует вос-
    пользоваться режимом CH_FREEEST,  в котором для очередного
    оценивания выбирается произвольная грань.
CH_VOLUMES - включение режима вычисления  объема  или  площади
    поверхности  внутреннего  аппроксимирующего многогранника.
    Работает только  при  включенном  режиме  CH_SIMPLEX.  Что
    именно будет вычисляться, определяется переменной
  CH_SURFACE.  Если она определена,  то будет вычисляться пло-
    щадь поверхности, а если нет, то объем. Вычисленная  вели-
    чина выдается в строке печати правее шести чисел,  состав-
    ляющих стандартную печать.  Если требуется протокол вычис-
    ления занести в файл,  то  следует  определить  переменную
  CH_VOLFILE. При этом в файл со стандартным именем outvol.prn
    для каждой  итерации будет записана строка из трех чисел -
    точность аппроксимации,  число вершин выпуклой оболочки  и
    объем (или площадь поверхности) внутреннего аппроксимирую-
    щего многогранника.

    Часть переменных препроцессора касается режимов работы ди-
алогового исполнительного модуля и задается в файле grs.c.
CH_LP_PC - стандартный режим аппроксимации проекции многогран-
    ника,  заданного в виде  MPS-файла  с  помощью  ЛП-системы
    П.Э.Шкляра.
CH_LPM - режим аппроксимации проекции многогранника, заданного
    в  виде  файла  специального  вида  с  помощью  ЛП-системы
    У.Х.Малкова, адаптированной для IBM PC на языке C.
CH_POINTS - режим аппроксимации  выпуклой  оболочки  множества
    точек. Опорная функция вычисляется путем перебора всех то-
    чек. В качестве входного файла используется текстовый файл
    следующей структуры.  В первой строке записано общее коли-
    чество чисел  (число  точек,  умноженное  на   размерность
    пространства).  Далее в каждой новой  строке  записываются
    через проблы координаты каждой точки.
CH_ELIPSE -  режим  аппроксимации  элипсоидов многогранниками.
    Опорная функция задается аналитически. В качестве входного
    файла используется текстовый файл, в котором через пробелы
    записаны длины полуосей аппроксимируемого элипсоида.

                       3. Описание процедур

    Формирование возвращаемого значения процедур, если не ого-
ворено иное, происходит по следующему принципу. При нормальном
завершении возвращаемое значение равно 0. При аварийном завер-
шении оно отрицательно, причем абсолютная величина этого  кода
соответствует номеру аварийного сообщения в списке,  данном  в
пункте 4 главы 1.  Для того, чтобы получить текст сообщения об
ошибке следует воспользоваться функцией ch_inform  (см. ниже).
В некоторых процедурах продусмотрено возникновение положитель-
ного кода завершения, что будет оговорено особо.

    Файл ch_calc - работа с коэффициентами граней.

double ch_calc_dif (float*, float*) - возвращает невзку грани
    на вершине. Первый параметр - указатель на поле "c" грани,
    второй - указатель на поле "c" вершины.
void ch_prn_facet (ch_facet*) - распечатывает на экране грань.
    Используется при ch_PRNT = 3.
void ch_combination (ch_facet*, ch_facet*, ch_facet*) - вычис-
    ляет коэффициенты новой грани по коэффициентам пары комби-
    нируемых граней.  Первые два параметра  - указатели на ис-
    ходные грани, третий - указатель на формируемую грань.

    Файл ch_comb  (в режиме CH_SIMPLEX - ch_scomb) - централь-
    ный блок присоединения вершины к выпуклой оболочке.

int ch_next_position (void) - переопределяет ch_index_position
    и настраивает его на следующую присоединяемую вершину. Ес-
    ли очередной элемент массива индексов исчерпан, то величи-
    на ch_SIZEind увеличивается  и  происходит  дополнительное
    выделение памяти под индексы всех граней при помощи проце-
    дуры realloc.
int ch_check (ch_facet*) - осуществляет контроль   погрешности
    построения выпуклой оболочки путем вычисления невязок всех
    граней на всех вершинах.
void ch_sort (void) - вычисляет невязки всех граней на присое-
    диняемой вершине и записывает их в поля "dif"  граней. При
    этом  происходит  пересортировка  всего списка граней так,
    чтобы сначала стояли грани  с  положительной  невязкой  на
    присоединяемой вершине, потом с нулевой (с учетом значения
    ch_EPSdif), а потом с отрицательной.
int ch_cycle_comb  (void)  - основная процедура преобразования
    многогранника при присоединении вершины к выпуклой оболоч-
    ке.

    Файл ch_equ - работа с равенствами.

void ch_equ_search (void) - ищет среди граней равнство по зна-
    чению поля  "top".  Если  находит,  переносит его в начало
    списка и присваивает указатель на это равенство переменной
    ch_equ_facet.
void ch_equ_double  (void) - преобразует равенство в два нера-
    венства.
int ch_equ_comb  (void)  -  основная  процедура преобразования
    многогранника при присоединении вершины  при  наличии  ра-
    венств.

    Файл ch_est - оценивание граней.

void ch_est_next (float*) - ищет грань,  которую следует  оце-
    нить  в  первую  очередь  и  указатель на нее записывает в
    ch_next_est_facet.  Параметр - указатель на  массив  длины
    ch_N, в котором хранятся коэффициенты последнего оцененно-
    го неравенства. В режиме CH_FREEEST параметр не  использу-
    ется.
void ch_est_max (void) - ищет  грань  с  максимальной  оценкой
    среди граней,  для которых рассчитывалось значение опорной
    функции, указатель на нее записывает в ch_max_est_facet.
int ch_est_write (float*) - приписывает оценку и соответствую-
    щую ей вершину к грани ch_next_est_facet.  Параметр - ука-
    затель на   массив   длины   ch_N,   в  котором  находятся
    координаты вершины.
void ch_dir_write (float*) - переписывает  коэффициенты  грани
    ch_next_est_facet в массив, указатель на который задан па-
    раметром.

    Файл ch_init - инициализация начальной системы неравенств.

int ch_init_facet (int) - инициализирует начальную систему не-
    равенств и,  возможно, равенств. Если параметр равен 4, то
    будет строиться парето-оболочка, и для определения направ-
    лений улучшения  переменных  используется массив ch_state.
    Если же параметр равен 1,  то  строится  обычная  выпуклая
    оболочка и массив ch_state не используется.
int ch_inf_comb (void) - приписывает начальные индексы началь-
    ной системе неравенств.

    Файл ch_prn - печать.

void ch_inf_print (unsigned int) - печатает на экране информа-
    ционную  строку  из  шести  чисел  (см.описание  параметра
    ch_PRNT в первой главе).  Параметр - битовая константа,  в
    которой шесть младших разрядов  соответствуют  каждому  из
    печатаемых чисел. Единица в соответствующей позиции указы-
    вает на необходимость печати данного числа.  Если параметр
    равен 0,  то печатается заглавная строка с названиями всех
    шести столбцов таблицы.  Если параметр содержит все  шесть
    единиц младших разрядов, то печатаются все шесть чисел бе-
    лым цветом и производится перевод строки. В противном слу-
    чае печатаются только отмеченные единицами  числа  красным
    цветом без перевода строки.
char *ch_inform (int) - возвращает указатель на строку,  кото-
    рая содержит текст сообщения,  соответствующий коду завер-
    шения.  Параметр - код завершения должен находиться в диа-
    пазоне от -1 до -8.

    Файл ch_mem - распределение памяти.

int ch_add_facet (ch_facet**) - создает новый экземпляр записи
    типа ch_facet и добавляет его в начало списка.  Параметр -
    указатель на переменную,  указывающую  на  начало  нужного
    списка.  При этом также выделяется память под уазатели по-
    лей "ind" и "c".
void ch_free_facet (ch_facet**) - освобожджает всю память, за-
    нятую списком записей типа ch_facet.  Параметр - указатель
    на переменную, указывающую на начало нужного списка.  Этой
    переменной присваивается значение NULL.
int ch_copy_facet (ch_facet*, ch_facet*)  -  работает только в
    режиме CH_SIMPLEX. Переписывает из грани, на которую  ука-
    зывает второй параметр, в грань, на которую указывает пер-
    вый параметр, значения индексов (симплексов) и коэффициен-
    тов, а также указатель в поле "top".
void ch_free_top (ch_top**)  -  работает аналогично  процедуре
    ch_free_facet со списком записей типа ch_top.
void ch_del_top (ch_facet*)  - освобождает память,  выделенную
    под указатель поля "top" грани, на которую указывает пара-
    метр.
void ch_move_top (ch_facet*, ch_facet*) - переносит  указатель
    в поле "top" из грани на которую  указывает  второй  пара-
    метр, в грань, на которую указывает первый параметр.  Полю
    "top"  второй  грани присватвается значение NULL.

    Файл ch_dat - ввод и вывод файла аппроксимации.

void ch_reverse (void) - переписывает список вершин,  на кото-
    рый указывает переменная ch_first_top в  обратном порядке.
    Требуется для служебных целей в процедуре ch_write_dat.
void ch_free_mem (void) -  освобожджает  всю  память,  занятую
    списками  системы построения выпуклой оболочки,  а именно,
    тремя   списками,   на   которые   указывают    переменные
    ch_first_facet, ch_first_top и ch_emp_facet.
int ch_read_dat (char*, char*, char*, int**)  - считывает дан-
    ные из файла описания переменных  и  файла  аппроксимации.
    Инициализирует все необходимые для начала работы  перемен-
    ные и заполняет все необходимые структуры  данных.  Первый
    параметр - строка, содержащая имя файла задания переменных
    проекции  (третий файл пункта 1 главы 1 данной инструкции)
    или файла аппроксимации.  Второй параметр - строка из трех
    символов, содержащая тип модели. Если это строка "nul", то
    после выполнения функции эта строка  будет  содержать  тип
    модели из последней строки файла описания переменных  про-
    екции.  В противном случае  заданный  тип  сравнивается  с
    типом в файле описания переменных проекции, и в случае не-
    совпадения выдается ошибка. Третий параметр - адрес, в ко-
    торый прцедура помещает имя файла модели из файла описания
    переменных проекции. Четвертый  параметр - адрес указателя
    на массив с номерами критериальных переменных в файле опи-
    сания модели.  Память под массив выделяется самой процеду-
    рой. Возвращает отрицательный код завершения или следующие
    положительные значения, которые свидетельствуют о нормаль-
    ном завершении работы.
  1 - был прочитан файл начальных данных.  Можно начинать апп-
    роксимацию, причем следует аппроксимировать все множество.
  2 - был прочитан файл аппроксимации.  Все  структуры  данных
    заполнены и можно продолжать процесс аппроксимации дальше.
  4 - был прочитан файл начальных данных.  Можно начинать апп-
    роксимацию, причем следует аппроксимировать парето-оболоч-
    ку множества. Направления улучшения критериев лежат в мас-
    сиве ch_state.
    Для запуска процесса аппроксимации этот положительный  код
    следует подавать  на  вход  процедуры ch_primal в качестве
    третьего параметра.
int ch_write_dat (char*, char*) - записывает результат аппрок-
    симации в файл.  Первый параметр - строка,  содержащая имя
    файла,   из  которого  были  считаны   данные   процедурой
    ch_read_dat. Из этого файла будут считываться первые стро-
    ки,  так как в памяти они не хранятся.  Второй  параметр -
    строка, содержащая имя файла, куда будет записан результат
    аппроксимации.  Если оба файла имеют одинаковые имена,  то
    расширитель первого файла заменяется на "bak".

    Файл ch_primal.

int ch_primal (float*, float*, int)  - основная программа, ор-
    ганизующая  работу  системы  построения выпуклой оболочки.
    Первый параметр - выходной.  Он указывает на массив  длины
    ch_N,  через который будут передаваться координаты направ-
    ления,  для которого следует рассчитать  значение  опорной
    функции. Второй параметр - входной. Он указывает на массив
    длины ch_N,  через который будут  передаваться  координаты
    точки, полученной в результате вычисления опорной функции.
    При первом обращении содержание массивов,  на которые ука-
    зывают первые два параметра, несущественно, а третий пара-
    метр должен иметь значение,  которое возвращает  процедура
    ch_read_dat. Если возвращаемое значение равно 0, то в мас-
    сиве, на который указывает первый параметр лежат координа-
    ты направления,  для которого следует рассчитать  значение
    опорной функции и получить граничную точку множества.  Это
    вычисление находится вне непосредственной компетенции сис-
    темы построения выпуклой оболочки.  После того,  как точка
    вычислена, ее координаты должны  быть  помещены  в массив,
    на который указывает второй параметр.  Затем следует снова
    обратиться к процедуре ch_primal, причем значение третьего
    должно быть равно нулю.  Таким образом в управляющей  про-
    грамме должен быть организован цикл поочередного обращения
    к процедуре ch_primal и процедуре вычисления опорной функ-
    ции,  и выход из этого цикла должен осуществляться  тогда,
    когда результатом выполнения  функции  ch_primal  окажется
    отрицательное число. Заметим, что НЕ СЛЕДУЕТ МЕНЯТЬ первый
    параметр и значения массива,  на который  он  указывает  в
    промежутке между обращениями к функции ch_primal.

     Файл grs.c - головной  файл  диалогового  исполнительного
модуля. В нем организуется связь между системой построения вы-
пуклой оболочки,  различными (в зависимости от  выбора  режима
трансляции) системами расчета опорной функции аппроксимируемо-
го множества и системой организации работы с меню.
